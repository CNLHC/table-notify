import { notification } from "antd";
import axios from "axios";
import moment from "moment";

export function get_login_url(req: { appid: string; redirect: string }) {
  const param = new URLSearchParams();
  param.append("response_type", "code");
  param.append("autologin", "false");
  param.append("redirect_uri", req.redirect);
  param.append("scope", "user_info,cloud_file,file_selector");
  param.append("style", "dark");
  param.append("appid", req.appid);
  return `https://openapi.wps.cn/oauthapi/v2/authorize?${param.toString()}`;
}
// Generated by https://quicktype.io

export interface GetAccessTokenResp {
  result: number;
  token: Token;
}

export interface Token {
  appid: string;
  expires_in: string;
  access_token: string;
  refresh_token: string;
  openid: string;
}


export function get_access_token(req: {
  appid: string
  appkey: string
  code: string

}) {
  return axios.get<GetAccessTokenResp>('https://openapi.wps.cn/oauthapi/v2/token', { params: req, timeout: 4000 }).then(e => e.data)
}

export function get_rpc_token(req: {
  appid: string
  token: string
}) {
  const param = new URLSearchParams();
  param.append('access_token', req.token)
  param.append('appid', req.appid)
  param.append('scope', 'user_info,cloud_file,file_selector')
  return axios.post<{ rpc_token: string }>('https://openapi.wps.cn/oauthapi/v2/rpc/token', {}, { params: param, timeout: 4000 }).then(e => e.data)
}


export interface UserInfoResp {
  result: number;
  user: User;
}

export interface User {
  nickname: string;
  avatar: string;
  sex: string;
  openid: string;
  unionid: string;
}

export function get_user_info(req: {
  appid: string
  access_token: string
}) {
  return axios.get<UserInfoResp>('https://openapi.wps.cn/oauthapi/v3/user', { params: req }).then(e => e.data)
}



export function fileselector_download(req: {
  appid: string
  access_token: string
  file_code: string
}) {
  return axios.get<{
    download_info_list: Array<{ open_file_id: string, url: string }>
    result: number
  }>(' https://openapi.wps.cn/oauthapi/v2/selector/download/url', { params: req }).then(e => e.data)
}

export function handle_wps_error(e: any) {
  if (e.msg == "ExceedActionTimes:download") {
    notification["error"]({
      message: "WPS 服务受到限制",
      description: ` WPS 限制每个账号每天只能通过开放接口下载50次, 您的配额将在${moment
        .duration(
          e.extra_info.rate_limit_reset,
          "second"
        )
        .asHours()
        .toFixed(2)}小时后恢复.`,
    });
  }
}
